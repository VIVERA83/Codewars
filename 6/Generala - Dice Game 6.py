""" Generala - Dice Game 6 """


# Генерала это игра в кости, популярная в Южной Америке. Это очень похоже на Яхтзи но с другим подходом к подсчету
# очков. В нее играют 5 кубиков, и возможные результаты таковы::
# Результат	Очки	Правила	Образцы
# Генерала	50	Когда все брошенные кости имеют одинаковое значение.	66666, 55555, 44444, 11111, 22222, 33333.
# ПОКЕР	    40	Четыре брошенных кубика имеют одинаковое значение.	44441, 33233, 22262.
# Полный дом	30	Три брошенных кубика имеют одинаковую ценность, остальные два имеют различную ценность,
#                 но равны между собой.	12121, 44455, 66116.
# ГЕТЕРО	    20	Брошенные кости расположены в последовательном порядке. Кости со значением 1 это подстановочный знак,
#                 который можно использовать в начале прямой или в конце ее.	12345, 23456, 34561, 13654, 62534.
# Другое       0	Все остальное вернется 0 Очки.	                 44421, 61623, 12346.
# Пожалуйста, обратите внимание, что кости не в порядке; например 12543 квалифицируется как а STRAIGHT.
# Кроме того, независимо от того, какое строковое значение вы получаете для кубиков, вы всегда можете переупорядочить их
# в любом порядке, чтобы они квалифицировались как STRAIGHT. Т.Е. 12453,16543,15364, 62345 все они квалифицируются как
# действительные STRAIGHTс.
# Выполните функцию, которая задается брошенными кубиками в виде строки длины 5 и верните очки, набранные в этом броске.
# Вы можете смело предположить, что предоставленные параметры будут действительны:
# Строка длиной 5,
# Каждый символ будет представлять собой число между 1 и 6 len(set(dice)) == 5 and
""" На мой взгляд самое понятное решение и очень короткое Молодец"""
def points(dice):
    if len(set(dice)) == 1: return 50
    if len(set(dice)) == 2:
        if dice.count(set(dice).pop()) in [1, 4]: return 40
        if dice.count(set(dice).pop()) in [2, 3]: return 30
    if len(set(dice)) == 5 and ''.join(sorted(dice)).find('345') > 0: return 20
    return 0


test = ["34561", "12346", '61623']

for i in test:
    print(i, points(i))

# test.assert_equals(points("55555"), 50)
# test.assert_equals(points("66666"), 50)
# test.assert_equals(points("11111"), 50)
# test.assert_equals(points("22222"), 50)
# test.assert_equals(points("33333"), 50)
# test.assert_equals(points("44444"), 50)
# test.assert_equals(points("44441"), 40)
# test.assert_equals(points("33233"), 40)
# test.assert_equals(points("22262"), 40)
# test.assert_equals(points("12121"), 30)
# test.assert_equals(points("44455"), 30)
# test.assert_equals(points("66116"), 30)
# test.assert_equals(points("12345"), 20)
# test.assert_equals(points("23456"), 20)
# test.assert_equals(points("34561"), 20)
# test.assert_equals(points("13564"), 20)
# test.assert_equals(points("62534"), 20)
# test.assert_equals(points("44421"), 0)
# test.assert_equals(points("61623"), 0)
#
